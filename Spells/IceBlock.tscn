[gd_scene load_steps=12 format=3 uid="uid://dgs3ch0m4371p"]

[ext_resource type="Script" path="res://Spells/Spell.cs" id="1_vq0pp"]
[ext_resource type="Shader" path="res://RuneTree/spell_slot_outline.gdshader" id="2_rlulf"]
[ext_resource type="Texture2D" uid="uid://udh8s6sk57s" path="res://Spells/art/spell-sprites/spell-ice-block.png" id="3_yfnux"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_k5l2r"]
shader = ExtResource("2_rlulf")
shader_parameter/color = Color(0.819608, 0.768627, 0.745098, 0.113725)
shader_parameter/width = 1.362
shader_parameter/pattern = 0
shader_parameter/inside = false
shader_parameter/add_margins = true

[sub_resource type="Shader" id="Shader_ypy5h"]
code = "shader_type canvas_item;

uniform vec4 color : source_color;
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false

void vertex() {
	if (add_margins) {
		VERTEX += (UV * 2.0 - 1.0) * width;
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, vec2(0.0), vec2(1.0)) || texture(texture, xy).a == 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0));
		
		uv = (uv - texture_pixel_size * width) * TEXTURE_PIXEL_SIZE / texture_pixel_size;
		
		if (uv != clamp(uv, vec2(0.0), vec2(1.0))) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv);
		}
	} else {
		COLOR = texture(TEXTURE, uv);
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb, color.a) : color.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wr5hb"]
shader = SubResource("Shader_ypy5h")
shader_parameter/color = Color(1, 1, 1, 1)
shader_parameter/width = 0.0
shader_parameter/pattern = 1
shader_parameter/inside = false
shader_parameter/add_margins = true

[sub_resource type="Gradient" id="Gradient_8kjse"]
offsets = PackedFloat32Array(0, 0.75)
colors = PackedColorArray(0.113725, 0.498039, 0.745098, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture2D" id="GradientTexture2D_t61db"]
gradient = SubResource("Gradient_8kjse")
fill = 1
fill_from = Vector2(0.487179, 0.478632)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_7ipaw"]
size = Vector2(348.333, 20)

[sub_resource type="Animation" id="Animation_27x7w"]
resource_name = "Rotate"
loop_mode = 1

[sub_resource type="AnimationLibrary" id="AnimationLibrary_uok0p"]
_data = {
"Rotate": SubResource("Animation_27x7w")
}

[node name="IceBlock" type="Node2D"]
rotation = 6.28319
scale = Vector2(0.6, 0.6)
script = ExtResource("1_vq0pp")
RuneType = 11

[node name="Node2D" type="Node2D" parent="."]
material = SubResource("ShaderMaterial_k5l2r")

[node name="Sprite2D" type="Sprite2D" parent="Node2D"]
material = SubResource("ShaderMaterial_wr5hb")
use_parent_material = true
scale = Vector2(5.76562, 5.76562)
texture = ExtResource("3_yfnux")

[node name="PointLight2D" type="PointLight2D" parent="Node2D"]
position = Vector2(2.97638, -5.95277)
scale = Vector2(6.42864, 4.51673)
energy = 2.0
shadow_enabled = true
shadow_color = Color(0, 0, 0, 1)
texture = SubResource("GradientTexture2D_t61db")

[node name="StaticBody2D" type="StaticBody2D" parent="Node2D"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Node2D/StaticBody2D"]
position = Vector2(1.66588, -176.667)
shape = SubResource("RectangleShape2D_7ipaw")

[node name="CollisionShape2D4" type="CollisionShape2D" parent="Node2D/StaticBody2D"]
position = Vector2(10.0008, 175)
shape = SubResource("RectangleShape2D_7ipaw")

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Node2D/StaticBody2D"]
position = Vector2(175, 9.99922)
rotation = -1.5708
shape = SubResource("RectangleShape2D_7ipaw")

[node name="CollisionShape2D3" type="CollisionShape2D" parent="Node2D/StaticBody2D"]
position = Vector2(-173.333, 9.16744)
rotation = -1.5708
shape = SubResource("RectangleShape2D_7ipaw")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_uok0p")
}
autoplay = "Rotate"

[node name="SpellShootEvent" type="AkEvent2D" parent="."]
event = {
"id": 3599838629,
"name": "Player_Spell_Shoot"
}
trigger_on = 2
